// <auto-generated />
using System;
using HospitalCmsSystem.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalCmsSystem.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240320010950_1001")]
    partial class _1001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GitHubAcc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GitHubAcc = "https://github.com/klcuur",
                            Name = "Uğur Kılıç"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GitHubAcc = "https://github.com/sevvalyldrrm",
                            Name = "Şevval Yıldırım"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GitHubAcc = "https://github.com/o-ozkaya",
                            Name = "Ogün Özkaya"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GitHubAcc = "https://github.com/HdrClkl",
                            Name = "Hıdır Çelikel"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GitHubAcc = "github.com/adminfive",
                            Name = "Admin Five"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            City = "Istanbul",
                            ConcurrencyStamp = "0451bc4a-ff26-42d3-9f29-f445be4007dc",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FullName = "User One",
                            ImagePath = "path/to/image1.jpg",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAELlIg2fG7jjQyQ3wUAgwuVuNl2HWL+psuo5wZnh3TbH1130KJWNUaFcnGVyv6VK/JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            City = "Ankara",
                            ConcurrencyStamp = "fef93201-c604-4c11-a5d4-205885e7f4bb",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FullName = "User Two",
                            ImagePath = "path/to/image2.jpg",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEE44eXEG2pALLQ4DclejOqTincybYlE0arSQYhzUd5meDfpESSmX+X4bFWKcVEAqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            City = "Izmir",
                            ConcurrencyStamp = "598df1ea-df73-4875-9f90-9547de2e3adf",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FullName = "User Three",
                            ImagePath = "path/to/image3.jpg",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEBI0CwSdq9OR0svB0ZxrU2unws4LTJA8RnMXONkdvQ4BgSXpptkyeaWKNKhRv9SN8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            City = "Bursa",
                            ConcurrencyStamp = "dcfa9c76-ca89-4896-b086-bf4cb7dace14",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            FullName = "User Four",
                            ImagePath = "path/to/image4.jpg",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEHK1sZcR/ccNuZ5vdzxFgf3Oa618DaKGllIZmblJz08Qsi1jAVaQ9pQ1RVwfR+9how==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            City = "Antalya",
                            ConcurrencyStamp = "a634e9a4-42a1-4514-ae50-a417c1dc6c76",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            FullName = "User Five",
                            ImagePath = "path/to/image5.jpg",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEPtHgMgQtP4g2Icg/VPft6Jn7/vuiweuHsbU7erFZ1s7zLCEtlJIO9GfDNvy/uW8Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ab7c1e1-93e5-425c-96da-6b6d02651e80",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "HashForPassword1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e31067a2-0caa-41ff-8de3-78e8ed55f7b5",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4843b214-02f6-454b-96ba-62e2c7feec80",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "HashForPassword2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1696a7f-1df9-495c-b54a-15cf10d6ccbd",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f6c522d-3028-4218-a2fe-78704b689edd",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "HashForPassword3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be7f61b9-5fad-4f65-b0e9-3a5d7857ee5c",
                            TwoFactorEnabled = false,
                            UserName = "user8"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8bb40aa3-c01a-4ce9-9006-f600eec6c93a",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "HashForPassword4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bb84565-4d2e-41c3-ab69-609d1a8b3a4c",
                            TwoFactorEnabled = false,
                            UserName = "user9"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "121b7c9d-e81e-4b20-8654-1df440389dff",
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "HashForPassword5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8aed7cc7-6374-4c28-8738-800b3e7cbae9",
                            TwoFactorEnabled = false,
                            UserName = "user10"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentManagerId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentManagerId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            DoctorId = 11,
                            Email = "patient1@example.com",
                            FullName = "Patient One",
                            Message = "I need a general check-up.",
                            PatientId = 10,
                            Phone = "1234567890"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2024, 3, 22, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentManagerId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            DoctorId = 12,
                            Email = "patient2@example.com",
                            FullName = "Patient Two",
                            Message = "Consultation about my recent diagnosis.",
                            PatientId = 9,
                            Phone = "0987654321"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2024, 3, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentManagerId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            DoctorId = 13,
                            Email = "patient3@example.com",
                            FullName = "Patient Three",
                            Message = "Follow-up on the previous treatment.",
                            PatientId = 8,
                            Phone = "1231231234"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2024, 3, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentManagerId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 4,
                            DoctorId = 14,
                            Email = "patient4@example.com",
                            FullName = "Patient Four",
                            Message = "Emergency consultation required.",
                            PatientId = 7,
                            Phone = "3213214321"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2024, 3, 25, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            AppointmentManagerId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 5,
                            DoctorId = 15,
                            Email = "patient5@example.com",
                            FullName = "Patient Five",
                            Message = "Discussion about surgery options.",
                            PatientId = 6,
                            Phone = "4564564567"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.AppointmentManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("AppointmentManagers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 11,
                            EndingTime = new DateTime(2024, 3, 21, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 10,
                            StartingTime = new DateTime(2024, 3, 21, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 12,
                            EndingTime = new DateTime(2024, 3, 22, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 9,
                            StartingTime = new DateTime(2024, 3, 22, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 13,
                            EndingTime = new DateTime(2024, 3, 23, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 8,
                            StartingTime = new DateTime(2024, 3, 23, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 14,
                            EndingTime = new DateTime(2024, 3, 24, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 7,
                            StartingTime = new DateTime(2024, 3, 24, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 15,
                            EndingTime = new DateTime(2024, 3, 25, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            StartingTime = new DateTime(2024, 3, 25, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            Categories = "[]",
                            Content = "Some valuable health tips content...",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1403),
                            Tags = "[]",
                            Title = "Latest Health Tips"
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            Categories = "[]",
                            Content = "Deep dive into chronic diseases...",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1408),
                            Tags = "[]",
                            Title = "Understanding Chronic Diseases"
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 2,
                            Categories = "[]",
                            Content = "How to stay ahead of potential health issues...",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1411),
                            Tags = "[]",
                            Title = "Preventive Healthcare"
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 2,
                            Categories = "[]",
                            Content = "Exploring the relationship between diet and wellness...",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1414),
                            Tags = "[]",
                            Title = "Nutrition and Health"
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 3,
                            Categories = "[]",
                            Content = "Essential tips for maintaining a fit lifestyle...",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1420),
                            Tags = "[]",
                            Title = "Fitness Fundamentals"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            BlogId = 1,
                            Comment = "This is a very insightful article. Thank you for sharing!",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1539),
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 2,
                            BlogId = 1,
                            Comment = "I appreciate the depth of this post. Looking forward to more.",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1542),
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 3,
                            BlogId = 2,
                            Comment = "Can you provide more information on this subject?",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1544),
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 4,
                            BlogId = 2,
                            Comment = "I disagree with some points here, but it's a good read overall.",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1546),
                            IsActive = true
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 5,
                            BlogId = 3,
                            Comment = "How can I get in touch with the author for further questions?",
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1548),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.BlogImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("BlogImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1630),
                            ImagePath = "images/blog1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1633),
                            ImagePath = "images/blog2.jpg"
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1634),
                            ImagePath = "images/blog3.jpg"
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1636),
                            ImagePath = "images/blog4.jpg"
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1637),
                            ImagePath = "images/blog5.jpg"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1678),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            Message = "I have a question about...",
                            Phone = "123-456-7890",
                            Title = "Inquiry"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1681),
                            Email = "jane.smith@example.com",
                            FullName = "Jane Smith",
                            Message = "I need assistance with...",
                            Phone = "098-765-4321",
                            Title = "Support"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1683),
                            Email = "chris.johnson@example.com",
                            FullName = "Chris Johnson",
                            Message = "Here's what I think...",
                            Phone = "555-123-4567",
                            Title = "Feedback"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1685),
                            Email = "patricia.brown@example.com",
                            FullName = "Patricia Brown",
                            Message = "I would like to schedule a visit...",
                            Phone = "666-789-1234",
                            Title = "Appointment"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1687),
                            Email = "sam.walker@example.com",
                            FullName = "Sam Walker",
                            Message = "I have another type of question...",
                            Phone = "555-678-1234",
                            Title = "Other"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1756),
                            DepartmentDetailsId = 1,
                            Description = "Heart related services",
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1759),
                            DepartmentDetailsId = 2,
                            Description = "Brain and nervous system services",
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1761),
                            DepartmentDetailsId = 3,
                            Description = "Cancer treatment services",
                            Name = "Oncology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1763),
                            DepartmentDetailsId = 4,
                            Description = "Medical care for children",
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1765),
                            DepartmentDetailsId = 5,
                            Description = "Musculoskeletal system services",
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DepartmentBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentBlogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogId = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1803),
                            DepartmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlogId = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1805),
                            DepartmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            BlogId = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1806),
                            DepartmentId = 2
                        },
                        new
                        {
                            Id = 4,
                            BlogId = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1808),
                            DepartmentId = 2
                        },
                        new
                        {
                            Id = 5,
                            BlogId = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1816),
                            DepartmentId = 3
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DepartmentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionLong")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionShort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("DepartmentDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1943),
                            DepartmentId = 1,
                            DescriptionLong = "Long description of Cardiology",
                            DescriptionShort = "Short description of Cardiology",
                            Title = "About Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1946),
                            DepartmentId = 2,
                            DescriptionLong = "Long description of Neurology",
                            DescriptionShort = "Short description of Neurology",
                            Title = "About Neurology"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1948),
                            DepartmentId = 3,
                            DescriptionLong = "Long description of Oncology",
                            DescriptionShort = "Short description of Oncology",
                            Title = "About Oncology"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1950),
                            DepartmentId = 4,
                            DescriptionLong = "Long description of Pediatrics",
                            DescriptionShort = "Short description of Pediatrics",
                            Title = "About Pediatrics"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(1952),
                            DepartmentId = 5,
                            DescriptionLong = "Long description of Orthopedics",
                            DescriptionShort = "Short description of Orthopedics",
                            Title = "About Orthopedics"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DocFacebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocLinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocPinterest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocSkype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IntroductionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            AppUserId = 6,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2025),
                            DepartmentId = 1,
                            IntroductionId = 0,
                            Name = "Dr. Emily White",
                            Specialty = "Cardiology"
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 7,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2029),
                            DepartmentId = 2,
                            IntroductionId = 0,
                            Name = "Dr. John Carter",
                            Specialty = "Neurology"
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 8,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2032),
                            DepartmentId = 3,
                            IntroductionId = 0,
                            Name = "Dr. Clara Oswald",
                            Specialty = "Oncology"
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 9,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2034),
                            DepartmentId = 5,
                            IntroductionId = 0,
                            Name = "Dr. Derek Shepherd",
                            Specialty = "Orthopedics"
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 10,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2117),
                            DepartmentId = 4,
                            IntroductionId = 0,
                            Name = "Dr. Meredith Grey",
                            Specialty = "General Surgery"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DoctorPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2164),
                            DoctorId = 11,
                            PatientId = 6
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2166),
                            DoctorId = 12,
                            PatientId = 7
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2168),
                            DoctorId = 13,
                            PatientId = 8
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2169),
                            DoctorId = 14,
                            PatientId = 9
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2171),
                            DoctorId = 15,
                            PatientId = 10
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntroductionId")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IntroductionId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2211),
                            DoctorId = 11,
                            University = "Harvard University",
                            Year = "2000 - 2004"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2214),
                            DoctorId = 12,
                            University = "Johns Hopkins University",
                            Year = "2002 - 2006"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2216),
                            DoctorId = 13,
                            University = "Stanford University",
                            Year = "2001 - 2005"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2218),
                            DoctorId = 14,
                            University = "University of California",
                            Year = "2003 - 2007"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2220),
                            DoctorId = 15,
                            University = "Massachusetts Institute of Technology",
                            Year = "2004 - 2008"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Introduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("MySkills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkingHourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.HasIndex("WorkingHourId");

                    b.ToTable("Introductions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2276),
                            Description = "Expert in Cardiology with 20 years of experience.",
                            DoctorId = 11,
                            WorkingHourId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2280),
                            Description = "Renowned Neurologist and published author.",
                            DoctorId = 12,
                            WorkingHourId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2282),
                            Description = "Leading Oncologist with numerous successful treatments.",
                            DoctorId = 13,
                            WorkingHourId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2284),
                            Description = "Orthopedic Surgeon with a focus on sports injuries.",
                            DoctorId = 14,
                            WorkingHourId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2286),
                            Description = "Award-winning General Surgeon with a passion for teaching.",
                            DoctorId = 15,
                            WorkingHourId = 1
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDischarged")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AppUserId = 6,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2439),
                            Diagnosis = "Acute Stress Reaction",
                            IsDischarged = false,
                            Name = "Michael Scott"
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 7,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2442),
                            Diagnosis = "Common Cold",
                            IsDischarged = true,
                            Name = "Pam Beesly"
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 8,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2444),
                            Diagnosis = "Sprained Ankle",
                            IsDischarged = false,
                            Name = "Jim Halpert"
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 9,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2446),
                            Diagnosis = "Concussion",
                            IsDischarged = false,
                            Name = "Dwight Schrute"
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 10,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2449),
                            Diagnosis = "Hypertension",
                            IsDischarged = true,
                            Name = "Angela Martin"
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Surgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Surgeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2570),
                            DepartmentId = 1,
                            PatientId = 6,
                            SurgeryDate = new DateTime(2024, 4, 19, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2526)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2573),
                            DepartmentId = 2,
                            PatientId = 7,
                            SurgeryDate = new DateTime(2024, 5, 19, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2572)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2576),
                            DepartmentId = 3,
                            PatientId = 8,
                            SurgeryDate = new DateTime(2024, 6, 18, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2575)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2578),
                            DepartmentId = 4,
                            PatientId = 9,
                            SurgeryDate = new DateTime(2024, 7, 18, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2578)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2581),
                            DepartmentId = 5,
                            PatientId = 10,
                            SurgeryDate = new DateTime(2024, 8, 17, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2580)
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.SurgeryDoctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("SurgeryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SurgeryId");

                    b.ToTable("SurgeryDoctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2625),
                            DoctorId = 11,
                            SurgeryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2627),
                            DoctorId = 12,
                            SurgeryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2628),
                            DoctorId = 13,
                            SurgeryId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2630),
                            DoctorId = 14,
                            SurgeryId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2631),
                            DoctorId = 15,
                            SurgeryId = 5
                        });
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsOffDay")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentManagerId");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2692),
                            DayOfWeek = 1,
                            DoctorId = 11,
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            IsOffDay = false,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2695),
                            DayOfWeek = 2,
                            DoctorId = 12,
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsOffDay = false,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2697),
                            DayOfWeek = 3,
                            DoctorId = 13,
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsOffDay = false,
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2700),
                            DayOfWeek = 4,
                            DoctorId = 14,
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            IsOffDay = false,
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 3, 20, 1, 9, 50, 179, DateTimeKind.Utc).AddTicks(2702),
                            DayOfWeek = 5,
                            DoctorId = 15,
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            IsOffDay = false,
                            StartTime = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Admin", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppointmentManager", "AppointmentManager")
                        .WithMany()
                        .HasForeignKey("AppointmentManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentManager");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.AppointmentManager", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Blog", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.BlogComment", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogComments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.BlogImage", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Blog", "Blog")
                        .WithMany("BlogImages")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DepartmentBlog", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Blog", "Blog")
                        .WithMany("DepartmentBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Department", "Department")
                        .WithMany("DepartmentBlogs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DepartmentDetail", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Department", "Departments")
                        .WithOne("DepartmentDetails")
                        .HasForeignKey("HospitalCmsSystem.Domain.Entities.DepartmentDetail", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.DoctorPatient", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Education", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Educations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Introduction", null)
                        .WithMany("Educations")
                        .HasForeignKey("IntroductionId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Introduction", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithOne("Introduction")
                        .HasForeignKey("HospitalCmsSystem.Domain.Entities.Introduction", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.WorkingHour", "WorkingHour")
                        .WithMany()
                        .HasForeignKey("WorkingHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("WorkingHour");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Patient", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Surgery", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Surgeries")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.SurgeryDoctor", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("SurgeryDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Surgery", "Surgery")
                        .WithMany("SurgeryDoctors")
                        .HasForeignKey("SurgeryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Surgery");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.WorkingHour", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppointmentManager", null)
                        .WithMany("WorkingHours")
                        .HasForeignKey("AppointmentManagerId");

                    b.HasOne("HospitalCmsSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HospitalCmsSystem.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.AppointmentManager", b =>
                {
                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Blog", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("BlogImages");

                    b.Navigation("DepartmentBlogs");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("DepartmentBlogs");

                    b.Navigation("DepartmentDetails")
                        .IsRequired();

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorPatients");

                    b.Navigation("Educations");

                    b.Navigation("Introduction")
                        .IsRequired();

                    b.Navigation("SurgeryDoctors");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Introduction", b =>
                {
                    b.Navigation("Educations");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorPatients");

                    b.Navigation("Surgeries");
                });

            modelBuilder.Entity("HospitalCmsSystem.Domain.Entities.Surgery", b =>
                {
                    b.Navigation("SurgeryDoctors");
                });
#pragma warning restore 612, 618
        }
    }
}
